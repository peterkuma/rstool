#!/usr/bin/env python3
"""rstool is an open source command-line program for converting native radiosonde
data to NetCDF and calculation of derived physical quantities.

Usage: rstool <input_type> <output_type> <input> <output>

Arguments:

- `input_type` - See Input types below.
- `output_type` - See Output types below.
- `input` - Input file or directory.
- `output` - Output file (NetCDF).

Input types:

- `imet` - InterMet Systems iMet-1-ABxn. Expected `input`: directory generated
    by the iMetOS-II software.
- `ws` - Windsond. Expected `input`: `.sounding` file generated by the Windsond
    software.
- `raw:<instrument>` - "Raw" instrument-dependent format (NetCDF). `instrument`
    is one of `imet`, `ws`.
- `pts` - Collection of measurement points (NetCDF). The output of running
    rstool with the output type `pts`.

Output types:

- `raw` - "Raw" instrument-dependent format (NetCDF).
- `pts` - Collection of measurement points (NetCDF).
- `prof` - Vertical profile calculated by interpolating the measurement points
    as a function of height (NetCDF).
"""

import sys
import signal
signal.signal(signal.SIGINT, lambda signal, frame: sys.exit(0))

VERSION = '0.1.0'

import datetime as dt
import ds_format as ds
import aquarius_time as aq

from rstoollib.drivers import DRIVERS
from rstoollib.headers import HEADER_PTS, HEADER_PROF
from rstoollib.postprocess import postprocess

def get_driver(name):
	try:
		drv = DRIVERS[name]
	except KeyError:
		raise ValueError('%s: unknown input type' % name)
	return drv
	
def main(input_type, output_type, input_, output):

	d_raw = None
	d_pts = None
	d_prof = None

	if input_type.startswith('raw:'):
		name = input_type[input_type.index(':'):]
		drv = get_driver(name)
		if hasattr(drv, 'read'):
			d_raw = drv.read(input_)
	elif input_type == 'pts':
		d_pts = ds.read(input_)
	else:
		drv = get_driver(input_type)
		if output_type == 'prof' and hasattr(drv, 'read_prof'):
			d_prof = drv.read_prof(input_)
		elif hasattr(drv, 'read'):
			d_raw = drv.read(input_)

	if d_pts is None and d_raw is not None and hasattr(drv, 'pts'):
		d_pts = drv.pts(d_raw)

	#if d_prof is None and d_pts is not None:
	#	d_prof = prof(d_pts)

	if d_prof is not None:
		postprocess(d_prof)

	not_supported_msg = 'input or output type not supported'

	if output_type == 'prof':
		if d_prof is None:
			raise ValueError(not_supported_msg)
		d = d_prof
	elif output_type == 'pts':
		if d_pts is None:
			raise ValueError(not_supported_msg)
		d = d_pts
	elif output_type == 'raw':
		if d_raw is None:
			raise ValueError(not_supported_msg)
		d = d_raw
	else:
		raise ValueError(not_supported_msg)

	d['.'] = d.get('.', {})
	d['.']['.'] = d['.'].get('.', {})
	d['.']['.'].update({
		'software': 'rstool ' + VERSION + ' (https://github.com/peterkuma/rstool)',
		'created': aq.to_iso(aq.from_datetime(dt.datetime.utcnow())),
	})
	ds.write(output, d)

if __name__ == '__main__':
	if len(sys.argv) != 5:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)

	input_type = sys.argv[1]
	output_type = sys.argv[2]
	input_ = sys.argv[3]
	output = sys.argv[4]
	
	#try:
	main(input_type, output_type, input_, output)
	#except Exception as e:
	#	sys.stderr.write('%s: %s\n' % (sys.argv[0], str(e)))
	#	sys.exit(1)
